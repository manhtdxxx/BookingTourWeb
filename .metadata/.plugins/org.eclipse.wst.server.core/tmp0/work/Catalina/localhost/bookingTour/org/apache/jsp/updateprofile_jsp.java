/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.96
 * Generated at: 2024-11-15 12:57:11 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import model.KhachHang;

public final class updateProfile_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("model.KhachHang");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"vi\">\r\n");
      out.write("<head>\r\n");
      out.write("<title>Thông tin cá nhân</title>\r\n");
      out.write("<meta charset=\"utf-8\">\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n");
      out.write("<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css\"\r\n");
      out.write("	rel=\"stylesheet\">\r\n");
      out.write("<link\r\n");
      out.write("	href=\"https://cdnjs.cloudflare.com/ajax/libs/bootstrap-icons/1.10.5/font/bootstrap-icons.min.css\"\r\n");
      out.write("	rel=\"stylesheet\">\r\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js\"></script>\r\n");
      out.write("<style>\r\n");
      out.write("body {\r\n");
      out.write("	background-color: #f0f8ff;\r\n");
      out.write("	font-family: 'Arial', sans-serif;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".form-container {\r\n");
      out.write("	max-width: 650px;\r\n");
      out.write("	background-color: #ffffff;\r\n");
      out.write("	border-radius: 12px;\r\n");
      out.write("	box-shadow: 0 6px 12px rgba(0, 0, 0, 0.1);\r\n");
      out.write("	padding: 30px;\r\n");
      out.write("	margin-top: 50px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".form-title {\r\n");
      out.write("	font-weight: bold;\r\n");
      out.write("	color: #007bff;\r\n");
      out.write("	font-size: 32px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".form-label {\r\n");
      out.write("	font-weight: 600;\r\n");
      out.write("	color: #495057;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".input-disabled {\r\n");
      out.write("	background-color: #f1f1f1;\r\n");
      out.write("	border-color: #ced4da;\r\n");
      out.write("	color: #6c757d;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".input-enabled {\r\n");
      out.write("	background-color: #ffffff;\r\n");
      out.write("	border-color: #007bff;\r\n");
      out.write("	color: #000;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".button-group {\r\n");
      out.write("	display: flex;\r\n");
      out.write("	gap: 12px;\r\n");
      out.write("	margin-top: 20px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".btn-submit, .btn-confirm, .btn-cancel {\r\n");
      out.write("	background-color: #007bff;\r\n");
      out.write("	border: none;\r\n");
      out.write("	color: white;\r\n");
      out.write("	padding: 10px 15px;\r\n");
      out.write("	border-radius: 8px;\r\n");
      out.write("	font-weight: 600;\r\n");
      out.write("	transition: all 0.3s ease-in-out;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".btn-submit:hover, .btn-confirm:hover {\r\n");
      out.write("	background-color: #0056b3;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".btn-cancel {\r\n");
      out.write("	background-color: #6c757d;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".btn-submit:disabled, .btn-confirm:disabled, .btn-cancel:disabled {\r\n");
      out.write("	background-color: #ddd;\r\n");
      out.write("	cursor: not-allowed;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".alert {\r\n");
      out.write("	border-radius: 12px;\r\n");
      out.write("	padding: 20px;\r\n");
      out.write("	font-size: 16px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".alert-success {\r\n");
      out.write("	background-color: #d4edda;\r\n");
      out.write("	color: #155724;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".alert-danger {\r\n");
      out.write("	background-color: #f8d7da;\r\n");
      out.write("	color: #721c24;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".alert .btn-close {\r\n");
      out.write("	font-size: 16px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("@media ( max-width : 576px) {\r\n");
      out.write("	.form-container {\r\n");
      out.write("		padding: 20px;\r\n");
      out.write("	}\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("document.addEventListener(\"DOMContentLoaded\", function() {\r\n");
      out.write("    const updateButton = document.querySelector(\".btn-submit\");\r\n");
      out.write("    const confirmButton = document.querySelector(\".btn-confirm\");\r\n");
      out.write("    const cancelButton = document.querySelector(\".btn-cancel\");\r\n");
      out.write("    const inputFields = document.querySelectorAll(\".form-control, .form-check-input\");\r\n");
      out.write("    const successAlert = document.getElementById(\"success-alert\");\r\n");
      out.write("    const errorAlert = document.getElementById(\"error-alert\");\r\n");
      out.write("\r\n");
      out.write("    // Store the original values as data attributes\r\n");
      out.write("    function saveOriginalValues() {\r\n");
      out.write("        inputFields.forEach(input => {\r\n");
      out.write("            input.dataset.originalValue = input.type === \"radio\" ? input.checked : input.value;\r\n");
      out.write("        });\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    // Restore values from the data attributes\r\n");
      out.write("    function restoreOriginalValues() {\r\n");
      out.write("        inputFields.forEach(input => {\r\n");
      out.write("            if (input.type === \"radio\") {\r\n");
      out.write("                input.checked = (input.dataset.originalValue === \"true\");\r\n");
      out.write("            } else {\r\n");
      out.write("                input.value = input.dataset.originalValue;\r\n");
      out.write("            }\r\n");
      out.write("        });\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    // Toggle edit mode\r\n");
      out.write("    function toggleEditMode(enable) {\r\n");
      out.write("        inputFields.forEach(input => {\r\n");
      out.write("            input.disabled = !enable;\r\n");
      out.write("            input.classList.toggle(\"input-enabled\", enable);\r\n");
      out.write("            input.classList.toggle(\"input-disabled\", !enable);\r\n");
      out.write("        });\r\n");
      out.write("        updateButton.style.display = enable ? \"none\" : \"inline-block\";\r\n");
      out.write("        confirmButton.style.display = enable ? \"inline-block\" : \"none\";\r\n");
      out.write("        confirmButton.disabled = true; // Initially disable \"Đồng ý\" button\r\n");
      out.write("        cancelButton.style.display = enable ? \"inline-block\" : \"none\";\r\n");
      out.write("\r\n");
      out.write("        if (enable) {\r\n");
      out.write("            saveOriginalValues();\r\n");
      out.write("        } else {\r\n");
      out.write("            restoreOriginalValues();\r\n");
      out.write("        }\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    // Check if any value has changed from its original value\r\n");
      out.write("    function checkIfChanged() {\r\n");
      out.write("        let hasChanged = false;\r\n");
      out.write("        inputFields.forEach(input => {\r\n");
      out.write("            const originalValue = input.dataset.originalValue;\r\n");
      out.write("            if ((input.type === \"radio\" && input.checked.toString() !== originalValue) ||\r\n");
      out.write("                (input.type !== \"radio\" && input.value !== originalValue)) {\r\n");
      out.write("                hasChanged = true;\r\n");
      out.write("            }\r\n");
      out.write("        });\r\n");
      out.write("        confirmButton.disabled = !hasChanged; // Enable \"Đồng ý\" only if changes are detected\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    // Hide alerts when the update button is clicked\r\n");
      out.write("    updateButton.addEventListener(\"click\", () => {\r\n");
      out.write("        toggleEditMode(true);\r\n");
      out.write("        if (successAlert) successAlert.style.display = \"none\";\r\n");
      out.write("        if (errorAlert) errorAlert.style.display = \"none\";\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    // Add event listeners\r\n");
      out.write("    inputFields.forEach(input => {\r\n");
      out.write("        input.addEventListener(\"input\", checkIfChanged);\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    cancelButton.addEventListener(\"click\", () => toggleEditMode(false));\r\n");
      out.write("});\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("	");

	Object obj = session.getAttribute("khachHang");
	KhachHang khachHang = null;

	if (obj != null) {
		khachHang = (KhachHang) obj;
	}

	if (khachHang == null) {
	
      out.write("\r\n");
      out.write("	<div class=\"container-fluid bg-light text-center py-5\" role=\"alert\">\r\n");
      out.write("		<h1 class=\"fw-bold text-danger\">\r\n");
      out.write("			Bạn cần đăng nhập để truy cập trang này!\r\n");
      out.write("		</h1>\r\n");
      out.write("		<h5 class=\"mt-4\">\r\n");
      out.write("			Vui lòng quay lại <a href=\"index.jsp\" class=\"fw-bold text-primary text-decoration-underline\">trang\r\n");
      out.write("				chủ</a>.\r\n");
      out.write("		</h5>\r\n");
      out.write("		<h5 class=\"mt-2\">\r\n");
      out.write("			Hoặc truy cập <a href=\"login.jsp\" class=\"fw-bold text-primary text-decoration-underline\">trang\r\n");
      out.write("				đăng nhập</a> để tiếp tục.\r\n");
      out.write("		</h5>\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("	");

	} else {
	
      out.write("\r\n");
      out.write("	<!-- NAVBAR -->\r\n");
      out.write("	");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "layout/nav.jsp", out, false);
      out.write("\r\n");
      out.write("\r\n");
      out.write("	<!-- PROFILE FORM -->\r\n");
      out.write("	<section class=\"d-flex justify-content-center\">\r\n");
      out.write("		<div class=\"form-container px-5 py-4\">\r\n");
      out.write("			<h1 class=\"text-center mb-4\">Thông tin cá nhân</h1>\r\n");
      out.write("\r\n");
      out.write("			");

			String success = (String) request.getAttribute("success");
			String error = (String) request.getAttribute("error");
			
      out.write("\r\n");
      out.write("			");

			if (success != null) {
			
      out.write("\r\n");
      out.write("			<div class=\"alert alert-success alert-dismissible fade show w-100\" role=\"alert\"\r\n");
      out.write("				id=\"success-alert\">\r\n");
      out.write("				");
      out.print(success);
      out.write("\r\n");
      out.write("				<button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n");
      out.write("			</div>\r\n");
      out.write("			");

			} else if (error != null) {
			
      out.write("\r\n");
      out.write("			<div class=\"alert alert-danger alert-dismissible fade show w-100\" role=\"alert\" id=\"error-alert\">\r\n");
      out.write("				");
      out.print(error);
      out.write("\r\n");
      out.write("				<button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n");
      out.write("			</div>\r\n");
      out.write("			");

			}
			
      out.write("\r\n");
      out.write("\r\n");
      out.write("			<form action=\"update-profile\" method=\"post\">\r\n");
      out.write("				<input type=\"hidden\" name=\"maKH\" value=\"");
      out.print(khachHang.getMaKH());
      out.write("\">\r\n");
      out.write("\r\n");
      out.write("				<div class=\"mb-3\">\r\n");
      out.write("					<label for=\"customerName\" class=\"form-label\"><i class=\"bi bi-person me-1\"></i>Tên khách\r\n");
      out.write("						hàng</label> <input type=\"text\" class=\"form-control input-disabled\" id=\"customerName\"\r\n");
      out.write("						name=\"customerName\" value=\"");
      out.print(khachHang.getTenKH());
      out.write("\" placeholder=\"Nhập tên khách hàng\"\r\n");
      out.write("						required disabled>\r\n");
      out.write("				</div>\r\n");
      out.write("\r\n");
      out.write("				<div class=\"mb-3\">\r\n");
      out.write("					<label class=\"form-label\"><i class=\"bi bi-gender-ambiguous me-1\"></i>Giới tính</label>\r\n");
      out.write("					<div>\r\n");
      out.write("						<div class=\"form-check form-check-inline\">\r\n");
      out.write("							<input class=\"form-check-input input-disabled\" type=\"radio\" name=\"gender\" id=\"male\"\r\n");
      out.write("								value=\"Nam\" ");
      out.print("Nam".equals(khachHang.getGioiTinh()) ? "checked" : "");
      out.write(" disabled> <label\r\n");
      out.write("								class=\"form-check-label\" for=\"male\">Nam</label>\r\n");
      out.write("						</div>\r\n");
      out.write("						<div class=\"form-check form-check-inline\">\r\n");
      out.write("							<input class=\"form-check-input input-disabled\" type=\"radio\" name=\"gender\" id=\"female\"\r\n");
      out.write("								value=\"Nữ\" ");
      out.print("Nữ".equals(khachHang.getGioiTinh()) ? "checked" : "");
      out.write(" disabled> <label\r\n");
      out.write("								class=\"form-check-label\" for=\"female\">Nữ</label>\r\n");
      out.write("						</div>\r\n");
      out.write("					</div>\r\n");
      out.write("				</div>\r\n");
      out.write("\r\n");
      out.write("				<div class=\"mb-3\">\r\n");
      out.write("					<label for=\"phoneNumber\" class=\"form-label\"><i class=\"bi bi-telephone me-1\"></i>Số điện\r\n");
      out.write("						thoại</label> <input type=\"tel\" class=\"form-control input-disabled\" id=\"phoneNumber\"\r\n");
      out.write("						name=\"phoneNumber\" value=\"");
      out.print(khachHang.getSoDienThoai());
      out.write("\" placeholder=\"Nhập số điện thoại\"\r\n");
      out.write("						required disabled>\r\n");
      out.write("				</div>\r\n");
      out.write("\r\n");
      out.write("				<div class=\"mb-3\">\r\n");
      out.write("					<label for=\"email\" class=\"form-label\"><i class=\"bi bi-envelope me-1\"></i>Email</label> <input\r\n");
      out.write("						type=\"email\" class=\"form-control input-disabled\" id=\"email\" name=\"email\"\r\n");
      out.write("						value=\"");
      out.print(khachHang.getEmail());
      out.write("\" placeholder=\"Nhập email\" required disabled>\r\n");
      out.write("				</div>\r\n");
      out.write("\r\n");
      out.write("				<div class=\"button-group\">\r\n");
      out.write("					<button type=\"button\" class=\"btn-submit\" id=\"btnEdit\">Chỉnh sửa</button>\r\n");
      out.write("					<button type=\"submit\" class=\"btn-confirm\" style=\"display: none;\">Đồng ý</button>\r\n");
      out.write("					<button type=\"button\" class=\"btn-cancel\" style=\"display: none;\">Hủy</button>\r\n");
      out.write("				</div>\r\n");
      out.write("			</form>\r\n");
      out.write("		</div>\r\n");
      out.write("	</section>\r\n");
      out.write("\r\n");
      out.write("	<!-- FOOTER -->\r\n");
      out.write("	");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "layout/footer.jsp", out, false);
      out.write('\r');
      out.write('\n');
      out.write('	');

	}
	
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
